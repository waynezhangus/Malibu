import * as React from 'react';
import Head from 'next/head';
import Header from '../components/Header';
import { User } from '../typings';

export default function SettingsComponent() {
  const initUser: User = {
    theme: true,
    autoExtend: false,
    autoShowFeed: true,
    tweetNum: 5,
  };
  const [user, setUser] = React.useState(
    typeof window == 'undefined'
      ? initUser
      : localStorage.getItem('user')
      ? JSON.parse(localStorage.getItem('user') as string)
      : initUser
  );
  const onMount = React.useRef(true);

  React.useEffect(() => {
    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', (event) => {
        if (event.matches) document.documentElement.classList.add('dark');
        else document.documentElement.classList.remove('dark');
      });
  }, []);

  React.useEffect(() => {
    if (
      user?.theme === true ||
      (!user && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [user.theme]);

  React.useEffect(() => {
    if (!onMount.current) localStorage.setItem('user', JSON.stringify(user));
    else onMount.current = false;
  }, [user]);

  return (
    <div className="h-screen w-full dark:bg-zinc-900">
      <Head>
        <title>Settings</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header showTitle="settings" />
      <main className="max-w-3xl dark:text-gray-50 sm:mx-auto sm:border-x sm:border-gray-200 dark:sm:border-gray-600">
        <div
          className={`flex flex-col space-y-5 border-b border-gray-200 p-6 dark:border-zinc-600`}
        >
          <div className="mb-1">Display Settings</div>
          <label className="relative inline-flex cursor-pointer items-center">
            <input
              type="checkbox"
              className="peer sr-only"
              name="theme"
              checked={user.theme}
              onChange={(e) =>
                setUser({ ...user, [e.target.name]: e.target.checked })
              }
            />
            <div className="switch-bg"></div>
            <div className="switch-thumb"></div>
            <span className="ml-3 text-sm font-medium">Dark theme</span>
          </label>
          <label className="relative inline-flex cursor-pointer items-center">
            <input
              type="checkbox"
              className="peer sr-only"
              name="autoExtend"
              checked={user.autoExtend}
              onChange={(e) =>
                setUser({ ...user, [e.target.name]: e.target.checked })
              }
            />
            <div className="switch-bg"></div>
            <div className="switch-thumb"></div>
            <span className="ml-3 text-sm font-medium">
              Extend the threads by default
            </span>
          </label>
          <label className="relative inline-flex cursor-pointer items-center">
            <input
              type="checkbox"
              className="peer sr-only"
              name="autoShowFeed"
              checked={user.autoShowFeed}
              onChange={(e) =>
                setUser({ ...user, [e.target.name]: e.target.checked })
              }
            />
            <div className="switch-bg"></div>
            <div className="switch-thumb"></div>
            <span className="ml-3 text-sm font-medium">
              Show feeds on the search page by default
            </span>
          </label>
        </div>
        <div
          className={`flex flex-col space-y-5 border-b border-gray-200 p-6 dark:border-zinc-600`}
        >
          <div className="mb-1">Parser Settings</div>
          <label className="relative inline-flex cursor-pointer items-center">
            <input
              className="text-sm focus:outline-none dark:bg-zinc-800"
              type="number"
              min="2"
              max="10"
              name="tweetNum"
              value={user.tweetNum}
              onChange={(e) =>
                setUser({ ...user, [e.target.name]: e.target.value })
              }
            />
            <span className="ml-3 text-sm font-medium">
              Number of tweets generated by the parser
            </span>
          </label>
        </div>
      </main>
    </div>
  );
}
